import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class OldWomanGame extends JFrame {
    private CardLayout cardLayout;
    private JPanel mainPanel;
    private JPanel menuPanel;
    private JPanel gamePanel;
    private JButton[][] buttons;
    private boolean isPlayer1Turn;
    private boolean gameOver;

    public OldWomanGame() {
        setTitle("OLD WOMAN GAME");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(400, 400);
        setLocationRelativeTo(null);

        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);
        setContentPane(mainPanel);

        createMenuPanel();
        createGamePanel();

        mainPanel.add(menuPanel, "Menu");
        mainPanel.add(gamePanel, "Game");

        cardLayout.show(mainPanel, "Menu");

        setVisible(true);
    }

    private void createMenuPanel() {
        menuPanel = new JPanel();
        menuPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();

        JButton playButton = new JButton("Jogar");
        JButton exitButton = new JButton("Sair");

        playButton.setFont(new Font("Arial", Font.BOLD, 24));
        exitButton.setFont(new Font("Arial", Font.BOLD, 24));

        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.gridx = 0;

        gbc.gridy = 0;
        menuPanel.add(playButton, gbc);

        gbc.gridy = 1;
        menuPanel.add(exitButton, gbc);

        playButton.addActionListener(e -> startNewGame());
        exitButton.addActionListener(e -> System.exit(0));
    }

    private void createGamePanel() {
        gamePanel = new JPanel(new GridLayout(3, 3));
        buttons = new JButton[3][3];

        Font font = new Font("Arial", Font.BOLD, 40);

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                JButton button = new JButton();
                button.setFont(font);
                button.addActionListener(new ButtonClickListener(i, j));
                buttons[i][j] = button;
                gamePanel.add(button);
            }
        }
    }

    private class ButtonClickListener implements ActionListener {
        private int row, col;

        public ButtonClickListener(int row, int col) {
            this.row = row;
            this.col = col;
        }

        public void actionPerformed(ActionEvent e) {
            if (!gameOver && buttons[row][col].getText().isEmpty()) {
                buttons[row][col].setText(isPlayer1Turn ? "X" : "O");

                if (checkWinCondition()) {
                    gameOver = true;
                    JOptionPane.showMessageDialog(mainPanel, "Jogador " + (isPlayer1Turn ? "1 (X)" : "2 (O)") + " venceu!");
                    backToMenu();
                } else if (checkDrawCondition()) {
                    gameOver = true;
                    JOptionPane.showMessageDialog(mainPanel, "Empate!");
                    backToMenu();
                } else {
                    isPlayer1Turn = !isPlayer1Turn;
                }
            }
        }
    }

    private boolean checkWinCondition() {
        for (int i = 0; i < 3; i++) {
            if (!buttons[i][0].getText().isEmpty()
                    && buttons[i][0].getText().equals(buttons[i][1].getText())
                    && buttons[i][1].getText().equals(buttons[i][2].getText())) {
                return true;
            }
            if (!buttons[0][i].getText().isEmpty()
                    && buttons[0][i].getText().equals(buttons[1][i].getText())
                    && buttons[1][i].getText().equals(buttons[2][i].getText())) {
                return true;
            }
        }

        if (!buttons[0][0].getText().isEmpty()
                && buttons[0][0].getText().equals(buttons[1][1].getText())
                && buttons[1][1].getText().equals(buttons[2][2].getText())) {
            return true;
        }

        if (!buttons[0][2].getText().isEmpty()
                && buttons[0][2].getText().equals(buttons[1][1].getText())
                && buttons[1][1].getText().equals(buttons[2][0].getText())) {
            return true;
        }

        return false;
    }

    private boolean checkDrawCondition() {
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                if (buttons[i][j].getText().isEmpty())
                    return false;
        return true;
    }

    private void startNewGame() {
        // Limpa o tabuleiro
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                buttons[i][j].setText("");

        isPlayer1Turn = true;
        gameOver = false;

        cardLayout.show(mainPanel, "Game");
    }

    private void backToMenu() {
        Timer timer = new Timer(2000, e -> cardLayout.show(mainPanel, "Menu"));
        timer.setRepeats(false);
        timer.start();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(OldWomanGame::new);
    }
}
